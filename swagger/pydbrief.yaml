openapi: 3.0.3
info:
  title: PyDBrief API
  description: |-
    A Workbench for bidirectional data migration between different RDBMS and S3 engines
  contact:
    email: gtnunes@gmail.com
  version: 1.4.2
externalDocs:
  description: Known more about PyDBrief
  url: https://github.com/TheWiseCoder/PyDBrief
servers:
  - url: http://localhost:5000
    description: Local server for RDBMS migration work
tags:
  - name: rdbms
    description: Domain related to the RDBMS engines
    externalDocs:
      description: About RDBMS engines
      url: https://en.wikipedia.org/wiki/Relational_database
  - name: S3
    description: Domain related to the S3 engines
    externalDocs:
      description: About S3 engines
      url: https://en.wikipedia.org/wiki/Amazon_S3
  - name: data migration
    description: Data migration at various levels
    externalDocs:
      description: Learn about data migration between RDBMS engines
      url: https://en.wikipedia.org/wiki/Schema_migration
  - name: registry
    description: Operational data on the PyDBrief server
paths:
  /rdbms:
    post:
      tags:
        - rdbms
      summary: Configure the RDBMS engine
      description: Configure the RDBMS engine with the data needed for conection.
      operationId: configure-rdbms-engine
      parameters:
        - $ref: '#/components/parameters/DbEngineParam'
        - $ref: '#/components/parameters/DbNameParam'
        - $ref: '#/components/parameters/DbUserParam'
        - $ref: '#/components/parameters/DbPwdParam'
        - $ref: '#/components/parameters/DbHostParam'
        - $ref: '#/components/parameters/DbPortParam'
        - $ref: '#/components/parameters/DbClientParam'
        - $ref: '#/components/parameters/DbDriverParam'
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdbmsUpdated'
        '400':
          description: Unable to update the RDBMS engine's configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdbmsError'
  /rdbms/{rdbms}:
    get:
      tags:
        - rdbms
      summary: Retrieve the RDBMS engine configuration data
      description: Retrieve the connection parameters for the given RDBMS engine.
      operationId: get-rdbms-configuration
      parameters:
        - $ref: '#/components/parameters/RdbmsParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OracleConfiguration'
        '400':
          description: No data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RdbmsError'
  /s3:
    post:
      tags:
        - S3
      summary: Configure the S3 engine
      description: Configure the S3 engine with the data needed for conection.
      operationId: configure-s3-engine
      parameters:
        - $ref: '#/components/parameters/S3EngineParam'
        - $ref: '#/components/parameters/S3EndpointUrlParam'
        - $ref: '#/components/parameters/S3BucketNameParam'
        - $ref: '#/components/parameters/S3AccessKeyParam'
        - $ref: '#/components/parameters/S3SecretKeyParam'
        - $ref: '#/components/parameters/S3RegionNameParam'
        - $ref: '#/components/parameters/S3SecureAccessParam'
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3Updated'
        '400':
          description: Unable to update the S3 engine's configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3Error'
  /s3/{s3-engine}:
    get:
      tags:
        - S3
      summary: Retrieve the S3 engine configuration data
      description: Retrieve the access parameters for the given S3 engine.
      operationId: get-s3s-configuration
      parameters:
        - $ref: '#/components/parameters/S3EnginePathParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3Configuration'
        '400':
          description: No data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3Error'
  /migration:metrics:
    get:
      tags:
        - data migration
      summary: Retrieve the metrics for data migration
      description: Retrieve the RDBMS-independent parameters driving the data migration.
      operationId: get-migration-metrics
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MigrationMetrics'
    patch:
      tags:
        - data migration
      summary: Configure the metrics for data migration
      description: Set up the RDBMS-independent parameters driving the migration process.
      operationId: configure-migration
      parameters:
        - name: batch-size
          in: query
          description: Maximum number of rows to migrate per batch (range is [1000-1000000]).
          required: false
          schema:
            type: integer
            minimum: 1000
            maximum: 1000000
            default: 200000
        - name: chunk-size
          in: query
          description: Maximum size, in bytes, of data chunks in LOB data copying (range is [1024-16777216]).
          required: false
          schema:
            type: integer
            minimum: 1024
            maximum: 16777216
            default: 1048576
      responses:
        '200':
          description: Metrics configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsUpdated'
        '400':
          description: Unable to configure the migration metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSizeError'
  /migration:verify:
    post:
      tags:
        - data migration
      summary: Verify whether a migration can be launched
      description: Verify whether the current configuration allows for a migration to be launched.
      operationId: verify-migration
      parameters:
        - $ref: '#/components/parameters/FromRdbmsParam'
        - $ref: '#/components/parameters/ToRdbmsParam'
        - $ref: '#/components/parameters/ToS3Param'
      responses:
        '200':
          description: Migration can be launched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationSuccess'
                    
        '400':
          description: Migration cannot be launched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationFailure'
  /migrate:
    post:
      tags:
        - data migration
      summary: Migrate the data
      description:  Migrate the data from the source to the target RDBMS and schema.
      operationId: migrate-schema
      parameters:
        - $ref: '#/components/parameters/FromRdbmsParam'
        - $ref: '#/components/parameters/FromSchemaParam'
        - $ref: '#/components/parameters/ToRdbmsParam'
        - $ref: '#/components/parameters/ToSchemaParam'
        - $ref: '#/components/parameters/ToS3Param'
        - $ref: '#/components/parameters/MigrateMetadataParam'
        - $ref: '#/components/parameters/MigratePlainParam'
        - $ref: '#/components/parameters/MigrateLobsParam'
        - $ref: '#/components/parameters/ProcessIndexesParam'
        - $ref: '#/components/parameters/ProcessViewsParam'
        - $ref: '#/components/parameters/RelaxReflectionParam'
        - $ref: '#/components/parameters/AcceptEmptyParam'
        - $ref: '#/components/parameters/SkipNonemptyParam'
        - $ref: '#/components/parameters/AddExtensionsParam'
        - $ref: '#/components/parameters/RemoveNullsParam'
        - $ref: '#/components/parameters/IncludeRelationsParam'
        - $ref: '#/components/parameters/ExcludeRelationsParam'
        - $ref: '#/components/parameters/ExcludeConstraintsParam'
        - $ref: '#/components/parameters/ExcludeColumnsParam'
        - $ref: '#/components/parameters/OverrideColumnsParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MigrationSuccess'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaError'
  /logging:
    get:
      tags:
        - registry
      summary: Retrieve the server's operation log
      description: Retrieve a file containing the operation log of the PyDBrief server.
      operationId: retrieve-log
      parameters:
        - $ref: '#/components/parameters/LogAttachParam'
        - $ref: '#/components/parameters/LogLevelParam'
        - $ref: '#/components/parameters/LogFromDatetimeParam'
        - $ref: '#/components/parameters/LogToDatetimeParam'
        - $ref: '#/components/parameters/LogLastDaysParam'
        - $ref: '#/components/parameters/LogLastHoursParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Value '<from>' of 'from' attribute invalid
    post:
      tags:
        - registry
      summary: Reconfigure the properties, location, and contents of the server's operation log. For omitted parameters, the existing current values are reused.
      description:  Reconfigure the server's operating log
      operationId: configure-log
      parameters:
        - $ref: '#/components/parameters/LogLevelParam'
        - $ref: '#/components/parameters/LogFilePathParam'
        - $ref: '#/components/parameters/LogFileModeParam'
        - $ref: '#/components/parameters/LogFormatParam'
        - $ref: '#/components/parameters/LogStyleParam'
        - $ref: '#/components/parameters/LogDateFormatParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggingRestarted'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Value '<log-level>' of 'log-level' attribute invalid
  /swagger/pydbrief.json:
    get:
      tags:
        - registry
      summary: Retrieve PyDBrief's API specifications in Swagger JSON format
      description: Retrieve the file containing the API specifications in Swagger JSON format.
      operationId: get-swagger-json
      parameters:
        - name: attach
          in: query
          description: Indicates, with the value '0', 'f' or 'false', that the file should be displayed by the browser. It is saved by default.
          required: false
          schema:
            type: string
            default: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
  /version:
    get:
      tags:
        - registry
      summary: Retrieve the current versions of PyDBrief and accompanying PyPomes modules
      description: Retrieve the version of PyDBrief and accompanying PyPomes modules currently running.
      operationId: get-version
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  PyDBrief:
                    type: string
                    example: 1.3.1
                  PyPomes-Core:
                    type: string
                    example: 1.4.0
                  PyPomes-DB:
                    type: string
                    example: 1.3.1
                  PyPomes-HTTP:
                    type: string
                    example: 0.2.6
                  PyPomes-Logging:
                    type: string
                    example: 0.2.'
                  PyPomes-S3:
                    type: string
                    example: 0.4.5
                  PyPomes-Security:
                    type: string
                    example: 0.2.2
components:
  parameters:
    DbEngineParam:
      name: db-engine
      in: query
      description: The RDBMS engine to configure
      required: true
      schema:
        type: string
        enum: [mysql,oracle,postgres,sqlserver]
    DbNameParam:
      name: db-name
      in: query
      description: The database identification
      required: true
      schema:
        type: string
    DbUserParam:
      name: db-user
      in: query
      description: Logon user
      required: true
      schema:
        type: string
    DbPwdParam:
      name: db-pwd
      in: query
      description: Logon password
      required: true
      schema:
        type: string
    DbHostParam:
      name: db-host
      in: query
      description: Host access URL
      required: true
      schema:
        type: string
    DbPortParam:
      name: db-port
      in: query
      description: Host access port
      required: true
      schema:
        type: integer
    DbClientParam:
      name: db-client
      in: query
      description: Client software installed in local workstation (Oracle, only)
      required: false
      schema:
        type: string
    DbDriverParam:
      name: db-driver
      in: query
      description: Database access driver (SQLServer, only)
      required: false
      schema:
        type: string
    LogAttachParam:    
      name: log-attach
      in: query
      description: Indicates, with the value '0', 'f' or 'false', that the file should be displayed by the browser. It is saved by default.
      required: false
      schema:
        type: boolean
        default: true
    LogFromDatetimeParam:
      name: log-from-datetime
      in: query
      description: Timestamp for the start of the interval
      required: false
      schema:
        type: string
        format: YYYYMMDDhhmmss
    LogToDatetimeParam:
      name: log-to-datetime
      in: query
      description: Timestamp for the end of the interval
      required: false
      schema:
        type: string
        format: YYYYMMDDhhmmss
    LogLastDaysParam:
      name: log-last-days
      in: query
      description: How many days to go back for the start of the interval - ignored if 'log-from-datetime' or 'log-to-datetime' are specified
      required: false
      schema:
        type: integer
    LogLastHoursParam:
      name: log-last-hours
      in: query
      description: How many hours to go back for the start of the interval - ignored if 'log-from-datetime' or 'log-to-datetime' are specified
      required: false
      schema:
        type: integer
    LogDateFormatParam:
      name: log-date-format
      in: query
      description: Format for writing the date and time on the log entries.
      required: false
      schema:
        type: string
        default: YYYY-MM-DD HH:MM:SS
    LogFilePathParam:
      name: log-file-path
      in: query
      description: The path for the log file. Defaults to 'PYDB.log' at the OS standard temporary folder.
      required: false
      schema:
        type: string
    LogFileModeParam:
      name: log-file-mode
      in: query
      description: The mode for log file opening (a- append to the file's existing contents, w- write to the beginning of the file, erasing its existing contents)
      required: false
      schema:
        type: string
        enum: [a,w]
        default: a
    LogFormatParam:
      name: log-format
      in: query
      description: Describes the information to be written to the log, detailing the format for each item. Very technical, requires knowledge of Python's 'logging' package.
      required: false
      schema:
        type: string
    LogLevelParam:
      name: log-level
      in: query
      description: The logging level. For the meaning of the available levels, refer to the documentation for logging in the C, Java, or Python platforms.
      required: false
      schema:
        type: string
        enum: [debug,info,warning,error,critical]
        default: debug
    LogStyleParam:
      name: log-style
      in: query
      description: The style used for building the 'log-format' parameter. Very technical, requires knowledge of Python's 'logging' package.
      required: false
      schema:
        type: string
    S3EngineParam:
      name: s3-engine
      in: query
      description: The S3 engine to configure
      required: true
      schema:
        type: string
        enum: [aws,minio]
    S3EndpointUrlParam:
      name: s3-endpoint-url
      in: query
      description: The URL to access the S3 services
      required: true
      schema:
        type: string
    S3BucketNameParam:
      name: s3-bucket-name
      in: query
      description: The storage bucket to use
      required: true
      schema:
        type: string
    S3AccessKeyParam:
      name: s3-access-key
      in: query
      description: The access key to logon to the S3 engine
      required: true
      schema:
        type: string
    S3SecretKeyParam:
      name: s3-secret-key
      in: query
      description: The secret key to logon to the S3 engine
      required: true
      schema:
        type: string
    S3RegionNameParam:
      name: s3-region-name
      in: query
      description: The reference region for the service
      required: false
      schema:
        type: string
    S3SecureAccessParam:
      name: s3-secure-access
      in: query
      description: Whether to use TLS (Transport Layer Security - MinIO), or SSL (Security Socket Layer - AWS)
      required: false
      schema:
        type: boolean
        default: false
    S3EnginePathParam:
      name: s3-engine
      in: path
      description: The S3 engine to configure
      required: true
      schema:
        type: string
        enum: [aws,minio]
    ToS3Param:
      name: to-s3
      in: query
      description: The S3 service to migrate the LOB data to. This parameter should be specified both at the 'migrate-metadata' and 'migrate-lobdata' steps, if migrating the LOBs to the target RDBMS is not desired. Otherwise, it should not be specified.
      required: false
      schema:
        type: string
        enum: [aws,minio]
        example: 
    FromRdbmsParam:
      name: from-rdbms
      in: query
      description: The RBMS to migrate from
      required: true
      schema:
        type: string
        enum: [mysql,oracle,postgres,sqlserver]
        example: oracle
    ToRdbmsParam:
      name: to-rdbms
      in: query
      description: The RBMS to migrate to
      required: true
      schema:
        type: string
        enum: [mysql,oracle,postgres,sqlserver]
        example: postgres
    FromSchemaParam:
      name: from-schema
      in: query
      description: The schema to migrate from
      required: true
      schema:
        type: string
    ToSchemaParam:
      name: to-schema
      in: query
      description: The schema to migrate to
      required: true
      schema:
        type: string
    RdbmsParam:
      name: rdbms
      in: path
      description: The reference RDBMS engine
      required: true
      schema:
        type: string
        enum: [mysql,oracle,postgres,sqlserver]
    AcceptEmptyParam:
      name: accept-empty
      in: query
      description: Accounts for all migrated LOBs, even if they are empty, or if their corresponding column cells have NULL values. If LOBs are being migrated to an S3 storage, this parameter causes empty LOBs to be sent thereto. Ignored if parameter 'migrate-lobdata' is not specified.
      schema:
        type: boolean
        default: false
    AddExtensionsParam:
      name: add-extensions
      in: query
      description: Whether file extensions are to be added to the names of objects migrated to S3 storage. Ignored if parameters 'migrate-lobdata' and 'to-s3' are not specified.
      required: false
      schema:
        type: boolean
        default: false
    MigrateMetadataParam:
      name: migrate-metadata
      in: query
      description: Whether metadata should be migrated. This will create or transform the destination schema.
      required: true
      schema:
        type: boolean
        default: true
    MigratePlainParam:
      name: migrate-plaindata
      in: query
      description: Whether plain data should be migrated. This assumes that metadata is also being migrated, or that all affected tables exist in destination schema and are empty.
      required: true
      schema:
        type: boolean
        default: true
    MigrateLobsParam:
      name: migrate-lobdata
      in: query
      description: Whether LOB data should be migrated. This assumes that plain data are being, or have already been, migrated.
      required: true
      schema:
        type: boolean
        default: true
    ProcessIndexesParam:
      name: process-indexes
      in: query
      description: Whether indexes should be considered.
      required: false
      schema:
        type: boolean
        default: false
    ProcessViewsParam:
      name: process-views
      in: query
      description: Whether views should be considered.
      required: false
      schema:
        type: boolean
        default: false
    RelaxReflectionParam:
      name: relax-reflection
      in: query
      description: Relaxes requirement that referenced tables must be found during the schema reflection phase. Will not automatically prevent a 'referenced table not found' error in the subsequent schema migration phase, but additional useful debug information is likely to be provided.
      required: false
      schema:
        type: boolean
        default: false
    SkipNonemptyParam:
      name: skip-nonempty
      in: query
      description: This parameter has two purposes. 1- to prevent plaindata migration for tables in the destination schema that are not empty; 2- to prevent migration of LOBs to S3 storage if their respective destination folders (technically known as the object's 'prefix') are not empty. Useful for resuming an aborted plaindata migration, or an aborted lobdata migration to S3 storage, without having to resort to reorganizing table lists. Ignored if 'migrate-plaindata', or 'migrate-lobdata' and 'to-s3', are not specified.
      schema:
        type: boolean
        default: false
    IncludeRelationsParam:
      name: include-relations
      in: query
      description: Relations (tables, views, and indexes) to migrate. Mutually exclusive with 'exclude-relations'. Irrelevant for views and indexes, if 'process-views' and 'process-indexes' were not specified, respectively.
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    ExcludeRelationsParam:
      name: exclude-relations
      in: query
      description: Relations (tables, views, and indexes) not to migrate. Mutually exclusive with 'include-relations'. Irrelevant for views and indexes, if 'process-views' and 'process-indexes' were not specified, respectively.
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    ExcludeColumnsParam:
      name: exclude-columns
      in: query
      description: Table columns not to migrate. Column names must be table-qualified (<table-name>.<column-name>).
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    ExcludeConstraintsParam:
      name: exclude-constraints
      in: query
      description: Constraints not to migrate.
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    RemoveNullsParam:
      name: remove-nulls
      in: query
      description: Optional list of source tables having columns with NULLs embedded in their string content. This is accepted by RDBMS servers like Oracle, but rejected by others like PostgreSQL. This parameter instructs PyDBrief to search for, and remove, the NULLs when migrating plaindata. Ignored in the 'migrate-metadata' and migrate-lobdata' steps.
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
          example: my_table.my_column=integer
    OverrideColumnsParam:
      name: override-columns
      in: query
      description: Optional list of table columns with types to be forced upon. These types override the standard type conversion. Useful for referenced but unreacheable columns, such as FK columns pointing to absent tables. Column names must be table-qualified (<table-name>.<column-name>=<type-name>). Types must be valid in target RDBMS.
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
          example: my_table.my_column=integer
  schemas:
    LoggingRestarted:
      type: object
      properties:
        status:
          type: string
          example: Log restarted, with the configuration specified
    MigrationMetrics:
      type: object
      properties:
        batch-size:
          type: integer
          example: 200000
        chunk-size:
          type: integer
          example: 1024000
    OracleConfiguration:
      type: object
      properties:
        rdbms:
          type: string
          example: oracle
        name:
          type: string
          example: MyOracle
        user:
          type: string
          example: admin
        pwd:
          type: string
          example: admin
        host:
          type: string
          example: https://my-oracle.com
        port:
          type: integer
          example: 1521
        client:
          type: string
          example: C:\oracle\instantclient_21_6
    PostgresConfiguration:
      type: object
      properties:
        rdbms:
          type: string
          example: postgres
        name:
          type: string
          example: MyPostgres
        user:
          type: string
          example: admin
        password:
          type: string
          example: admin
        host:
          type: string
          example: https://my-postgres.com
        port:
          type: integer
          example: 5432
    S3Configuration:
      type: object
      properties:
        engine:
          type: string
          example: minio
        endpoint-url:
          type: string
          example: https:/minio_installation.com/access
        bucket-name:
          type: string
          example: my-bucket
        access-key: 
          type: string
          example: ADFSGTR7765YHTRTD76Y
        secret-key: 
          type: string
          example: fdsfsad37RE6ujIIOUPdfgtsD35U4ebtD21msgsb
        secure-access:
          type: boolean
          example: true
    MetricsUpdated:
      type: object
      properties:
        status:
          type: string
          example: Migration metrics updated
    RdbmsUpdated:
      type: object
      properties:
        status:
          type: string
          example: Rdbms 'oracle' configuration updated
    S3Updated:
      type: object
      properties:
        status:
          type: string
          example: S3 'minio' configuration updated
    VerificationSuccess:
      type: object
      properties:
        status:
          type: string
          example: Migration can be launched
        metrics:
          $ref: '#/components/schemas/MigrationMetrics'
        from-rdbms:
          $ref: '#/components/schemas/OracleConfiguration'
        to-rdbms:
          $ref: '#/components/schemas/PostgresConfiguration'
        to-s3:
          $ref: '#/components/schemas/S3Configuration'
    VerificationFailure:
      type: object
      properties:
        status:
          type: string
          example: Migration cannot be launched
        errors:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
                example: Value 'oracle' cannot be assigned for attributes 'from-rdbms' and 'to-rdbms' at the same time
    MigrationSuccess:
      type: object
      properties:
        started:
          type: string
          example: 2024-05-06 23:51:42
        finished:
          type: string
          example: 2024-05-06 23:51:46
        steps:
          type: array
          items:
            type: string
          example:
            - migrate-metadata
            - migrate-plaindata
        source-rdbms:
          $ref: '#/components/schemas/OracleConfiguration'
        target-rdbms:
          $ref: '#/components/schemas/PostgresConfiguration'
        target-s3:
          $ref: '#/components/schemas/S3Configuration'
        migrated-tables:
          type: object
          properties:
            my-table:
              type: object
              properties:
                plain-count:
                  type: integer
                  example: 1250000
                plain-status:
                  type: string
                  example: "full"
                lob-count:
                  type: integer
                  example: 2500000
                lob-status:
                  type: string
                  example: "full"
                my-column-1:
                  type: object
                  properties:
                    source-type:
                      type: string
                      example: NUMBER(7,0)
                    target-type:
                      type: string
                      example: INTEGER
                    features:
                      type: array
                      items:
                        type: string
                      example:
                        - identity
                        - primary-key
                my-column-2:
                  type: object
                  properties:
                    source-type:
                      type: string
                      example: NUMBER(9,2)
                    target-type:
                      type: string
                      example: FLOAT
        total-plains:
          type: integer
          example: 1570970
        total-lobs:
          type: integer
          example: 5890575
        total-tables:
          type: integer
          example: 15
        log-file:
          type: string
          example: /tmp/pydbrief.log
        version:
          type: string
          example: 1.3.0
    BatchSizeError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              attribute:
                type: string
                example: batch-size
              description:
                type: string
                example: Invalid value '50'
    SchemaError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              attribute:
                type: string
                example: from-schema
              description:
                type: string
                example: Invalid value 'my-schema'
    TablesError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              attribute:
                type: string
                example: tables
              description:
                type: string
                example: Invalid value 'my-table'
    RdbmsError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              attribute:
                type: string
                example: db-name
              description:
                type: string
                example: Invalid value 'my-database''
    S3Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              attribute:
                type: string
                example: s3-engine
              description:
                type: string
                example: Invalid value 'my-engine'