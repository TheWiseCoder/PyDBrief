{
    "openapi": "3.0.3",
    "info": {
        "title": "PyDBrief API",
        "description": "A Workbench for bidirectional data migration between various RDBMS and S3 engines",
        "contact": {
            "email": "gtnunes@gmail.com"
        },
        "version": "2.0.3"
    },
    "externalDocs": {
        "description": "Known more about PyDBrief",
        "url": "https://github.com/TheWiseCoder/PyDBrief"
    },
    "servers": [
        {
            "url": "http://localhost:5000",
            "description": "Local server for RDBMS migration work"
        }
    ],
    "tags": [
        {
            "name": "migration sessions",
            "description": "Handling of migration sessions"
        },
        {
            "name": "rdbms",
            "description": "Domain related to the RDBMS engines",
            "externalDocs": {
                "description": "About RDBMS engines",
                "url": "https://en.wikipedia.org/wiki/Relational_database"
            }
        },
        {
            "name": "S3",
            "description": "Domain related to the S3 engines",
            "externalDocs": {
                "description": "About S3 engines",
                "url": "https://en.wikipedia.org/wiki/Amazon_S3"
            }
        },
        {
            "name": "data migration",
            "description": "Data migration at various levels",
            "externalDocs": {
                "description": "About data migration between RDBMS engines",
                "url": "https://en.wikipedia.org/wiki/Schema_migration"
            }
        },
        {
            "name": "registry",
            "description": "Operational data on the PyDBrief server"
        }
    ],
    "paths": {
        "/rdbms": {
            "post": {
                "tags": [
                    "rdbms"
                ],
                "summary": "Configure the RDBMS engine for a given session",
                "description": "Configure the RDBMS engine on a given session, with the data needed for conection.",
                "operationId": "configure-rdbms-engine",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/DbEngineParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbNameParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbUserParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbPwdParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbHostParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbPortParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbClientParam"
                    },
                    {
                        "$ref": "#/components/parameters/DbDriverParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RdbmsUpdated"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to update the RDBMS engine's configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RdbmsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rdbms/{rdbms}": {
            "get": {
                "tags": [
                    "rdbms"
                ],
                "summary": "Retrieve the RDBMS engine configuration data on a given session",
                "description": "Retrieve the connection parameters for the given RDBMS engine, on a given session.",
                "operationId": "get-rdbms-configuration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/RdbmsParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OracleConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No data found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RdbmsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/s3": {
            "post": {
                "tags": [
                    "S3"
                ],
                "summary": "Configure the S3 engine for a given session",
                "description": "Configure the S3 engine for a given session, with the data needed for conection.",
                "operationId": "configure-s3-engine",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/S3EngineParam"
                    },
                    {
                        "$ref": "#/components/parameters/S3EndpointUrlParam"
                    },
                    {
                        "$ref": "#/components/parameters/S3BucketNameParam"
                    },
                    {
                        "$ref": "#/components/parameters/S3AccessKeyParam"
                    },
                    {
                        "$ref": "#/components/parameters/S3SecretKeyParam"
                    },
                    {
                        "$ref": "#/components/parameters/S3RegionNameParam"
                    },
                    {
                        "$ref": "#/components/parameters/S3SecureAccessParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/S3Updated"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to update the S3 engine's configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/S3Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/s3/{s3-engine}": {
            "get": {
                "tags": [
                    "S3"
                ],
                "summary": "Retrieve the S3 engine configuration data for a given session",
                "description": "Retrieve the access parameters for the given S3 engine on a given session.",
                "operationId": "get-s3s-configuration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/S3EnginePathParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/S3Configuration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No data found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/S3Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "tags": [
                    "migration sessions"
                ],
                "summary": "Retrieve the existing sessions",
                "description": "Retrieve the existing migration sessions, along with their statuses.",
                "operationId": "retrieve-sessions",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationSessionsSuccess"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sessions/{session-id}": {
            "get": {
                "tags": [
                    "migration sessions"
                ],
                "summary": "Display the sessions configuration",
                "description": "Display the configuration data associated with the given session.",
                "operationId": "retrieve-session",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SessionIdPathParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationSessionSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionIdError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "migration sessions"
                ],
                "summary": "Create a new session and set it to 'active'",
                "description": "Create a new migration session and set its state to 'active'.",
                "operationId": "create-session",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SessionIdPathParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationSessionCreated"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionIdError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "migration sessions"
                ],
                "summary": "Set an existing session as 'active' or 'inactive'",
                "description": "Set the state of an existing session as 'active' or 'inactive'.",
                "operationId": "activate-session",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SessionIdPathParam"
                    },
                    {
                        "$ref": "#/components/parameters/IsActiveReqParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationSessionActivated"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionIdError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "migration sessions"
                ],
                "summary": "Delete an existing session",
                "description": "Delete an existing migration session. This operation will fail if a  migration is ongoing for the session.",
                "operationId": "delete-session",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SessionIdPathParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationSessionDeleted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionIdError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/migration:verify": {
            "post": {
                "tags": [
                    "data migration"
                ],
                "summary": "Verify whether a migration can be launched on a given session",
                "description": "Verify whether the current configuration allows for a migration to be launched.",
                "operationId": "verify-migration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/FromRdbmsReqParam"
                    },
                    {
                        "$ref": "#/components/parameters/ToRdbmsReqParam"
                    },
                    {
                        "$ref": "#/components/parameters/ToS3OptParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Migration can be launched",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Migration cannot be launched",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationFailure"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/migration/metrics": {
            "get": {
                "tags": [
                    "data migration"
                ],
                "summary": "Retrieve the metrics for data migration on a given session",
                "description": "Retrieve the RDBMS-independent parameters driving the data migration on a given session.",
                "operationId": "get-migration-metrics",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationMetrics"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to retrieve the migration metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionIdError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "data migration"
                ],
                "summary": "Configure the metrics for data migration for a given session",
                "description": "Set up the RDBMS-independent parameters driving the migration process on a given session.",
                "operationId": "configure-migration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/BatchSizeInParam"
                    },
                    {
                        "$ref": "#/components/parameters/BatchSizeOutParam"
                    },
                    {
                        "$ref": "#/components/parameters/ChunkSizeParam"
                    },
                    {
                        "$ref": "#/components/parameters/IncrementalSizeParam"
                    },
                    {
                        "$ref": "#/components/parameters/PlaindataChannelsParam"
                    },
                    {
                        "$ref": "#/components/parameters/PlaindataChannelSizeParam"
                    },
                    {
                        "$ref": "#/components/parameters/LobdataChannelsParam"
                    },
                    {
                        "$ref": "#/components/parameters/LobdataChannelSizeParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics configured",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetricsUpdated"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to configure the migration metrics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkSizeError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/migrate": {
            "post": {
                "tags": [
                    "data migration"
                ],
                "summary": "Migrate the data on a given session",
                "description": "Migrate the data from the source to the target RDBMS and schema on a given session.",
                "operationId": "migrate-data",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/FromRdbmsReqParam"
                    },
                    {
                        "$ref": "#/components/parameters/FromSchemaParam"
                    },
                    {
                        "$ref": "#/components/parameters/ToRdbmsReqParam"
                    },
                    {
                        "$ref": "#/components/parameters/ToSchemaParam"
                    },
                    {
                        "$ref": "#/components/parameters/ToS3OptParam"
                    },
                    {
                        "$ref": "#/components/parameters/MigrateMetadataParam"
                    },
                    {
                        "$ref": "#/components/parameters/MigratePlainParam"
                    },
                    {
                        "$ref": "#/components/parameters/MigrateLobsParam"
                    },
                    {
                        "$ref": "#/components/parameters/SynchronizePlainParam"
                    },
                    {
                        "$ref": "#/components/parameters/SynchronizeLobsParam"
                    },
                    {
                        "$ref": "#/components/parameters/ProcessIndexesParam"
                    },
                    {
                        "$ref": "#/components/parameters/ProcessViewsParam"
                    },
                    {
                        "$ref": "#/components/parameters/RelaxReflectionParam"
                    },
                    {
                        "$ref": "#/components/parameters/SkipNonemptyParam"
                    },
                    {
                        "$ref": "#/components/parameters/ReflectFiletypeParam"
                    },
                    {
                        "$ref": "#/components/parameters/FlattenStorageParam"
                    },
                    {
                        "$ref": "#/components/parameters/IncrementalMigrationsParam"
                    },
                    {
                        "$ref": "#/components/parameters/RemoveCtrlcharsParam"
                    },
                    {
                        "$ref": "#/components/parameters/IncludeRelationsParam"
                    },
                    {
                        "$ref": "#/components/parameters/ExcludeRelationsParam"
                    },
                    {
                        "$ref": "#/components/parameters/ExcludeConstraintsParam"
                    },
                    {
                        "$ref": "#/components/parameters/ExcludeColumnsParam"
                    },
                    {
                        "$ref": "#/components/parameters/OverrideColumnsParam"
                    },
                    {
                        "$ref": "#/components/parameters/OptimizePKsParam"
                    },
                    {
                        "$ref": "#/components/parameters/NamedLobdataParam"
                    },
                    {
                        "$ref": "#/components/parameters/MigrationBadgeOptParam"
                    },
                    {
                        "$ref": "#/components/parameters/SessionIdOptParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationSuccess"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchemaError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/migrate/{session-id}": {
            "delete": {
                "tags": [
                    "data migration"
                ],
                "summary": "Abort an ongoing migration",
                "description": "Abort an ongoing migration, identified by the 'session-id' parameter. The migration is aborted after the plaindata or lobdata migration for the current table is finished, thus preventing it to continue for the remaining tables.",
                "operationId": "abort-migration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SessionIdPathParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationAborted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionIdError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logging": {
            "get": {
                "tags": [
                    "registry"
                ],
                "summary": "Retrieve the server's operation log",
                "description": "Retrieve a file containing the operation log of the PyDBrief server.",
                "operationId": "retrieve-log",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/LogFilenameParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogLevelParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogThreadsParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogFromDatetimeParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogToDatetimeParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogLastDaysParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogLastHoursParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "Value '<datetime>' of 'log-from-datetime' attribute invalid"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "registry"
                ],
                "summary": "Reconfigure the properties, location, and contents of the server's operation log. For omitted parameters, the existing current values, possibily obtained from environment variables, are used.",
                "description": "Reconfigure and restart the server's operating log",
                "operationId": "configure-log",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/LogFilepathParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogFilemodeParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogLevelParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogFormatParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogStyleParam"
                    },
                    {
                        "$ref": "#/components/parameters/LogTimestampParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoggingRestarted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unsuccessful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "Value '<log_level>' of 'log-level' attribute invalid"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/swagger/pydbrief.json": {
            "get": {
                "tags": [
                    "registry"
                ],
                "summary": "Retrieve PyDBrief's API specifications in Swagger JSON format",
                "description": "Retrieve the file containing the API specifications in Swagger JSON format.",
                "operationId": "get-swagger-json",
                "parameters": [
                    {
                        "name": "attach",
                        "in": "query",
                        "description": "Values '1', 't', or 'true' indicate that the file should be saved to the filesystem (the default value). Values '0', 'f' or 'false' indicate that the file should be displayed by the browser.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "registry"
                ],
                "summary": "Display the current versions of PyDBrief and accompanying PyPomes modules",
                "description": "Retrieve and display the version of PyDBrief and accompanying PyPomes modules currently running.",
                "operationId": "get-version",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collophon"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "parameters": {
            "DbEngineParam": {
                "name": "db-engine",
                "in": "query",
                "description": "The RDBMS engine to configure",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "mysql",
                        "oracle",
                        "postgres",
                        "sqlserver"
                    ]
                }
            },
            "DbNameParam": {
                "name": "db-name",
                "in": "query",
                "description": "The database identification",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "DbUserParam": {
                "name": "db-user",
                "in": "query",
                "description": "Logon user",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "DbPwdParam": {
                "name": "db-pwd",
                "in": "query",
                "description": "Logon password",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "DbHostParam": {
                "name": "db-host",
                "in": "query",
                "description": "Host access URL",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "DbPortParam": {
                "name": "db-port",
                "in": "query",
                "description": "Host access port",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "DbClientParam": {
                "name": "db-client",
                "in": "query",
                "description": "Client software installed in local workstation (Oracle, only)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "DbDriverParam": {
                "name": "db-driver",
                "in": "query",
                "description": "Database access driver (SQLServer, only)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "LogFromDatetimeParam": {
                "name": "log-from-datetime",
                "in": "query",
                "description": "Timestamp for the start of the interval",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "YYYYMMDDhhmmss"
                }
            },
            "LogToDatetimeParam": {
                "name": "log-to-datetime",
                "in": "query",
                "description": "Timestamp for the end of the interval",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "YYYYMMDDhhmmss"
                }
            },
            "LogLastDaysParam": {
                "name": "log-last-days",
                "in": "query",
                "description": "How many days to go back for the start of the interval - ignored if 'log-from-datetime' or 'log-to-datetime' is specified",
                "required": false,
                "schema": {
                    "type": "integer",
                    "example": 2
                }
            },
            "LogLastHoursParam": {
                "name": "log-last-hours",
                "in": "query",
                "description": "How many hours to go back for the start of the interval - ignored if 'log-from-datetime' or 'log-to-datetime' is specified",
                "required": false,
                "schema": {
                    "type": "integer",
                    "example": 10
                }
            },
            "LogTimestampParam": {
                "name": "log-timestamp",
                "in": "query",
                "description": "Format for writing the date and time on the log entries. Must comply with Python's syntax for timestamp formatting.",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "%Y-%m-%d %H:%M:%S"
                }
            },
            "LogFilenameParam": {
                "name": "log-filename",
                "in": "query",
                "description": "Name of the file to save the downloaded data with. If omitted, the browser is requested to display the data, instead.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "LogFilepathParam": {
                "name": "log-filepath",
                "in": "query",
                "description": "The path for the log file to obtain the data from. Defaults to 'pydb.log' at the OS default temporary folder. If it is set to the special value 'stdout', the log entries are streamed to the standard output of the OS, rather than written to a file, in which case 'log-filemode' is ignored.",
                "required": false,
                "schema": {
                    "type": "string",
                    "example": "/tmp/pydb.log"
                }
            },
            "LogFilemodeParam": {
                "name": "log-filemode",
                "in": "query",
                "description": "The mode for log file opening (a- append to the file's existing contents, w- write to the beginning of the file, erasing its existing contents). Ignored if 'log-filepath' is set to the special value 'stdout'.",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "a",
                        "w"
                    ],
                    "default": "w"
                }
            },
            "LogFormatParam": {
                "name": "log-format",
                "in": "query",
                "description": "Describes the information to be written to the log, detailing the format for each item. Very technical, requires knowledge of Python's 'logging' package.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "LogLevelParam": {
                "name": "log-level",
                "in": "query",
                "description": "The log level. For the meaning of the available levels, refer to the documentation for logging in the C, Java, or Python platforms.",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical"
                    ],
                    "default": "debug"
                }
            },
            "LogThreadsParam": {
                "name": "log-threads",
                "in": "query",
                "description": "A comma-separated list of threads originating the log entries. Defaults to all threads.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "LogStyleParam": {
                "name": "log-style",
                "in": "query",
                "description": "The style used for building the 'log-format' parameter. Very technical, requires knowledge of Python's 'logging' package.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "S3EngineParam": {
                "name": "s3-engine",
                "in": "query",
                "description": "The S3 engine to configure",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "aws",
                        "minio"
                    ]
                }
            },
            "S3EndpointUrlParam": {
                "name": "s3-endpoint-url",
                "in": "query",
                "description": "The URL to access the S3 services",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "S3BucketNameParam": {
                "name": "s3-bucket-name",
                "in": "query",
                "description": "The storage bucket to use",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "S3AccessKeyParam": {
                "name": "s3-access-key",
                "in": "query",
                "description": "The access key to logon to the S3 engine",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "S3SecretKeyParam": {
                "name": "s3-secret-key",
                "in": "query",
                "description": "The secret key to logon to the S3 engine",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "S3RegionNameParam": {
                "name": "s3-region-name",
                "in": "query",
                "description": "The reference region for the service",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "S3SecureAccessParam": {
                "name": "s3-secure-access",
                "in": "query",
                "description": "Whether to use TLS (Transport Layer Security - MinIO), or SSL (Security Socket Layer - AWS)",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "S3EnginePathParam": {
                "name": "s3-engine",
                "in": "path",
                "description": "The S3 engine to configure",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "aws",
                        "minio"
                    ]
                }
            },
            "BatchSizeInParam": {
                "name": "batch-size-in",
                "in": "query",
                "description": "Maximum number of rows to retrieve per batch. Range is [1000-10000000], initial value is 1000000. A size of 0 means all rows satisfying the query are retrieved at once.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1000,
                    "maximum": 10000000,
                    "default": 1000000
                }
            },
            "BatchSizeOutParam": {
                "name": "batch-size-out",
                "in": "query",
                "description": "Maximum number of rows to output per batch. Range is [1000-10000000], initial value is 1000000. A size of 0 means all rows retrieved are output at once.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1000,
                    "maximum": 10000000,
                    "default": 1000000
                }
            },
            "ChunkSizeParam": {
                "name": "chunk-size",
                "in": "query",
                "description": "Maximum size, in bytes, of data chunks in LOB data copying. Range is [1024-16777216] ([1 KBytes-16 GBytes]), initial value is 1048576 (1 GBytes).",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1024,
                    "maximum": 16777216,
                    "default": 1048576
                }
            },
            "IncrementalSizeParam": {
                "name": "incremental-size",
                "in": "query",
                "description": "Maximum number of rows to migrate, for tables flagged for incremental migration. Range is [1000-10000000], initial value is 100000.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1000,
                    "maximum": 10000000,
                    "default": 100000
                }
            },
            "PlaindataChannelsParam": {
                "name": "plaindata-channels",
                "in": "query",
                "description": "Maximum number of channels for simultaneous use in plaindata migrations. Range is [1-128], initial value is 1.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 128,
                    "default": 1
                }
            },
            "PlaindataChannelSizeParam": {
                "name": "plaindata-channel-size",
                "in": "query",
                "description": "Suggested number of rows per channel to process in plaindata migrations. Smaller or larger quantities may be used, as directed by the ratio between the total number of rows to migrate, and the maximum number of channels available. Range is [10000-10000000], initial value is 100000.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 10000,
                    "maximum": 10000000,
                    "default": 100000
                }
            },
            "LobdataChannelsParam": {
                "name": "lobdata-channels",
                "in": "query",
                "description": "Maximum number of channels for simultaneous use in lobdata migrations. Range is [1-128], initial value is 1.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 128,
                    "default": 1
                }
            },
            "LobdataChannelSizeParam": {
                "name": "lobdata-channel-size",
                "in": "query",
                "description": "Suggested number of rows per channel to process in lobdata migrations. Smaller or larger quantities may be used, as directed by the ratio between the total number of rows to migrate, and the maximum number of channels available. Range is [1000-1000000], initial value is 10000.",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1000,
                    "maximum": 1000000,
                    "default": 10000
                }
            },
            "MigrationBadgeOptParam": {
                "name": "migration-badge",
                "in": "query",
                "description": "The optional identification for the migration operation. If specified, it will be used to generate the JSON and log files specific to the  migration, and may be used for aborting the migration operation. Make sure to provide a name, or a relative filepath in POSIX notation, acceptable by the host OS for file creation. A value of 'migration-01/pydb_05_02', for example, would cause the generation of the files 'pydb_05_02.json' and 'pydb_05_02.log' on the folder 'migration_01' at the volume mapped to 'PYDB_REGISTRY_HOST'. This mapping is done at the host OS level, and is typically accomplished with an environment variable pointing to a folder.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "IsActiveReqParam": {
                "name": "is-active",
                "in": "query",
                "description": "The state to set the session to ('active' if True, 'inactive' otherwise).",
                "required": true,
                "schema": {
                    "type": "boolean"
                }
            },
            "SessionIdPathParam": {
                "name": "session-id",
                "in": "path",
                "description": "The required identification for a migration session. It is used to group all the configuration items used in migration operations.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "SessionIdOptParam": {
                "name": "session-id",
                "in": "query",
                "description": "The optional identification for the migration session. If not specified, the current active session is used.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ToS3OptParam": {
                "name": "to-s3",
                "in": "query",
                "description": "The S3 service to migrate the LOB data to. This parameter should be specified at the 'migrate-metadata' and 'migrate-lobdata' steps, if migrating the LOBs to S3 is desired. Otherwise, it should not be specified. As a reminder, indication of desired LOB migration to S3 storage must be made at the beginning of the process, so as to prevent the columns holding the LOBs from being created in the corresponding table at the target database.",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "aws",
                        "minio"
                    ],
                    "example": null
                }
            },
            "FromRdbmsReqParam": {
                "name": "from-rdbms",
                "in": "query",
                "description": "The RBMS to migrate from",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "mysql",
                        "oracle",
                        "postgres",
                        "sqlserver"
                    ],
                    "example": "oracle"
                }
            },
            "ToRdbmsReqParam": {
                "name": "to-rdbms",
                "in": "query",
                "description": "The RBMS to migrate to",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "mysql",
                        "oracle",
                        "postgres",
                        "sqlserver"
                    ],
                    "example": "postgres"
                }
            },
            "FromSchemaParam": {
                "name": "from-schema",
                "in": "query",
                "description": "The schema to migrate from",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "ToSchemaParam": {
                "name": "to-schema",
                "in": "query",
                "description": "The schema to migrate to",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "RdbmsParam": {
                "name": "rdbms",
                "in": "path",
                "description": "The reference RDBMS engine",
                "required": true,
                "schema": {
                    "type": "string",
                    "enum": [
                        "mysql",
                        "oracle",
                        "postgres",
                        "sqlserver"
                    ]
                }
            },
            "ReflectFiletypeParam": {
                "name": "reflect-filetype",
                "in": "query",
                "description": "Whether the lobdata are reflected for their file types, so as to add the corresponding file extensions to the names of objects migrated to S3 storage. Ignored if parameters 'migrate-lobdata' and 'to-s3' are not specified.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "FlattenStorageParam": {
                "name": "flatten-storage",
                "in": "query",
                "description": "Whether the LOBs are to be flatly stored on the S3 bucket, instead of being organized in a tree structure. This organization is effected by associating the migration to paths having the structure '\\<target-rdbms\\>@\\<target-db-host\\>\\<target-schema\\>\\<target-table\\>\\<lob-column\\>'. Ignored if parameter 'to-s3' is not specified.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "MigrateMetadataParam": {
                "name": "migrate-metadata",
                "in": "query",
                "description": "Whether metadata should be migrated. This will create or transform the destination schema.",
                "required": true,
                "schema": {
                    "type": "boolean",
                    "default": true
                }
            },
            "MigratePlainParam": {
                "name": "migrate-plaindata",
                "in": "query",
                "description": "Whether plain data should be migrated. This assumes that metadata is also being migrated, or that all affected tables exist in destination schema and are empty.",
                "required": true,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "MigrateLobsParam": {
                "name": "migrate-lobdata",
                "in": "query",
                "description": "Whether LOB data should be migrated. This assumes that plain data are being, or have already been, migrated.",
                "required": true,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "SynchronizePlainParam": {
                "name": "synchronize-plaindata",
                "in": "query",
                "description": "Synchronize the contents of plain data columns on tables in the target schema with the corresponding contents in the source schema. It is assumed that the relevant migrations have already ocurred. This operation ignores the parameter 'incremental-migrations', and cannot be combined with another migration step.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "SynchronizeLobsParam": {
                "name": "synchronize-lobdata",
                "in": "query",
                "description": "Synchronize the documents with given prefixes at the S3 storage with the LOBs in their corresponding source table columns at the database. This process does not consider eventual differences in content between the two items, but makes sure that they both exist simultaneously. Note that this synchronization should not be attempted if LOBs from more than one table column were migrated with the same prefix, as is the case if 'flatten-storage' was specified during the lobdata migration, and thus it will only operate on columns mapped on the 'named-lobdata' parameter. This operation ignores parameters 'incremental-migrations' and 'flatten-storage', and cannot be combined with another migration step.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "ProcessIndexesParam": {
                "name": "process-indexes",
                "in": "query",
                "description": "Whether indexes should be considered.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "ProcessViewsParam": {
                "name": "process-views",
                "in": "query",
                "description": "Whether views should be considered.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "RelaxReflectionParam": {
                "name": "relax-reflection",
                "in": "query",
                "description": "Relaxes requirement that referenced tables must be found during the schema reflection phase. Will not automatically prevent a 'referenced table not found' error in the subsequent schema migration phase, but additional useful debug information is likely to be provided.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "SkipNonemptyParam": {
                "name": "skip-nonempty",
                "in": "query",
                "description": "This parameter has two purposes. 1- to prevent plaindata migration for tables in the destination database schema that are not empty; 2- to prevent migration of LOBs to S3 storage, if their respective destination prefixes are already in use. Useful for resuming an aborted plaindata migration, or an aborted lobdata migration to S3 storage, without having to resort to reorganizing table lists. When migrating LOBs, it is ignored if 'to-s3' is not specified, or if 'flatten-storage' is specified.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "IncludeRelationsParam": {
                "name": "include-relations",
                "in": "query",
                "description": "Relations (tables, views, and indexes) to migrate. Mutually exclusive with 'exclude-relations'. Irrelevant for views and indexes, if 'process-views' and 'process-indexes' were not specified, respectively.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "ExcludeRelationsParam": {
                "name": "exclude-relations",
                "in": "query",
                "description": "Optional list of relations (tables, views, and indexes) not to migrate. Mutually exclusive with 'include-relations'. Irrelevant for views and indexes, if 'process-views' and 'process-indexes' were not specified, respectively.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "ExcludeColumnsParam": {
                "name": "exclude-columns",
                "in": "query",
                "description": "Optional list of table columns not to migrate. Column names must be table-qualified (\\<table-name\\>.\\<column-name\\>).",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "ExcludeConstraintsParam": {
                "name": "exclude-constraints",
                "in": "query",
                "description": "Optional list of constraints not to migrate. Constraint names should be the names used in the source database.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "NamedLobdataParam": {
                "name": "named-lobdata",
                "in": "query",
                "description": "Optional list of LOB columns whose contents are to be stored with names obtained from the contents of the given columns in the same touple. The format of the elements is '\\<table-name\\>.\\<lob-column\\>=\\<names-column\\>[.\\<extension\\>]'. The optional extension is used for lobdata naming, subject to the parameter 'reflect-filetype'. If the latter is specifed, the extension is used only if the reflection fails, otherwise the extension is always used. Ignored if parameters 'migrate-lobdata' and 'to-s3' are not specified.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "IncrementalMigrationsParam": {
                "name": "incremental-migrations",
                "in": "query",
                "description": "Optional list of tables for which plaindata migration and LOB migration are to be carried out incrementally. This parameter takes a list of comma-separated tables with the syntax '\\<table-name\\>[=[\\<size\\>][:\\<offset\\>]]', where '\\<size\\>' is the maximum number of rows to migrate, and '\\<offset\\>' is the offset into the source table. If omitted or set to 0, '\\<size\\>' is set to the migration metrics parameter 'incremental-size'. If omitted, '\\<offset\\>' is set to 0. If '\\<size\\>' is set to -1, migration is to include all rows to the end of the table. If '\\<offset\\>' is set to -1, it is set to the value of a count operation on the target table, for migration to another database, or to 0, for migration to S3 storage.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "my_table_1=100000"
                    }
                }
            },
            "RemoveCtrlcharsParam": {
                "name": "remove-ctrlchars",
                "in": "query",
                "description": "Optional list of source tables having columns with control characters embedded in their string content. This is accepted by RDBMS servers like Oracle, but rejected by others like PostgreSQL. This parameter instructs PyDBrief to search for, and replace with blanks, the control characters embedded in string contents when migrating or synchronizing plaindata. Ignored in other steps.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "my_table_1,my_table_2"
                    }
                }
            },
            "OverrideColumnsParam": {
                "name": "override-columns",
                "in": "query",
                "description": "Optional list of table columns with types to be forced upon. These types override the standard type conversion. Useful for referenced but unreacheable columns, such as FK columns pointing to absent tables. Column names must be table-qualified (\\<table-name\\>.\\<column-name\\>=\\<type-name\\>). Types must be valid in target RDBMS.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "my_table.my_column=numeric"
                    }
                }
            },
            "OptimizePKsParam": {
                "name": "optimize-pks",
                "in": "query",
                "description": "This parameter instructs PyDBrief to optimize the conversion of types for primary key columns which are not foreign keys. When the type in the source database is NUMBER (Oracle), DECIMAL (MySQL), or NUMERIC (MySQL, PostgreSQL, or SQLServer) with scale 0 and precision up to 19 digits, the converted type will be an integer type with 2, 4, or 8 bytes (as required by its precision).",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "schemas": {
            "Collophon": {
                "type": "object",
                "properties": {
                    "PyDBrief": {
                        "type": "string",
                        "example": "1.7.8'"
                    },
                    "foundations": {
                        "type": "object",
                        "properties": {
                            "pypomes_core": {
                                "type": "string",
                                "example": "2.3.7"
                            },
                            "pypomes_db": {
                                "type": "string",
                                "example": "2.2.5"
                            },
                            "pypomes_http": {
                                "type": "string",
                                "example": "0.7.1"
                            },
                            "pypomes_logging": {
                                "type": "string",
                                "example": "0.6.4"
                            },
                            "pypomes_s3": {
                                "type": "string",
                                "example": "0.8.7"
                            }
                        }
                    }
                }
            },
            "LoggingRestarted": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Log restarted"
                    },
                    "configuration": {
                        "type": "object",
                        "properties": {
                            "log-filemode": {
                                "type": "string",
                                "example": "a"
                            },
                            "log-filepath": {
                                "type": "string",
                                "example": "C:/tmp/ijud.log"
                            },
                            "log-format": {
                                "type": "string",
                                "example": "{asctime} {levelname:1.1} {thread:5d} {module:20.20} {funcName:20.20} {lineno:3d} {message}"
                            },
                            "log-level": {
                                "type": "string",
                                "example": "INFO"
                            },
                            "log-style": {
                                "type": "string",
                                "example": "{"
                            },
                            "log-timestamp": {
                                "type": "string",
                                "example": "%Y-%m-%d %H:%M:%S"
                            }
                        }
                    }
                }
            },
            "MigrationMetrics": {
                "type": "object",
                "properties": {
                    "batch-size-in": {
                        "type": "integer",
                        "example": 100000
                    },
                    "batch-size-out": {
                        "type": "integer",
                        "example": 100000
                    },
                    "chunk-size": {
                        "type": "integer",
                        "example": 1048576
                    },
                    "incremental-size": {
                        "type": "integer",
                        "example": 100000
                    },
                    "plaindata-channels": {
                        "type": "integer",
                        "example": null
                    },
                    "plaindata-channel-size": {
                        "type": "integer",
                        "example": 50000
                    },
                    "lobdata-channels": {
                        "type": "integer",
                        "example": 6
                    },
                    "lobdata-channel-size": {
                        "type": "integer",
                        "example": 20000
                    }
                }
            },
            "MigrationSpots": {
                "type": "object",
                "properties": {
                    "from-dbms": {
                        "type": "string",
                        "example": "oracle"
                    },
                    "to-rdbms": {
                        "type": "string",
                        "example": "postgres"
                    },
                    "to-s3": {
                        "type": "string",
                        "example": "aws"
                    }
                }
            },
            "MigrationSteps": {
                "type": "object",
                "properties": {
                    "migrate-metadata": {
                        "type": "boolean",
                        "example": true
                    },
                    "migrate-plaindata": {
                        "type": "boolean",
                        "example": false
                    },
                    "migrate-lobdata": {
                        "type": "boolean",
                        "example": false
                    },
                    "synchronize-plaindata": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "MigrationSpecs": {
                "type": "object",
                "properties": {
                    "exclude-columns": {
                        "type": "string",
                        "example": [
                            "<table-name>.<column-name-1>"
                        ]
                    },
                    "exclude-constraints": {
                        "type": "string",
                        "example": [
                            "<constraint-name>"
                        ]
                    },
                    "exclude-relations": {
                        "type": "string",
                        "example": [
                            "<table-name>",
                            "<view-name>",
                            "<index-name>"
                        ]
                    },
                    "flatten-storage": {
                        "type": "boolean",
                        "example": false
                    },
                    "from-schema": {
                        "type": "string",
                        "example": "my-schema"
                    },
                    "include-relations": {
                        "type": "string",
                        "example": [
                            "<table-name>",
                            "<view-name>",
                            "<index-name>"
                        ]
                    },
                    "incremental-migrations": {
                        "type": "string",
                        "example": [
                            "my-table=100000:300000"
                        ]
                    },
                    "migration-badge": {
                        "type": "string",
                        "example": "migration-01/pydb_05_02"
                    },
                    "named-lobdata": {
                        "type": "string",
                        "example": [
                            "<table-name>.<table-column>=<names-column>.<extension>"
                        ]
                    },
                    "override-columns": {
                        "type": "string",
                        "example": [
                            "<table-name>.<clumn-name>=<type-name>"
                        ]
                    },
                    "process-indexes": {
                        "type": "boolean",
                        "example": false
                    },
                    "process-views": {
                        "type": "boolean",
                        "example": false
                    },
                    "reflect-filetype": {
                        "type": "boolean",
                        "example": true
                    },
                    "relax-reflection": {
                        "type": "boolean",
                        "example": true
                    },
                    "remove-ctrlchars": {
                        "type": "string",
                        "example": [
                            "<table-name>"
                        ]
                    },
                    "to-schema": {
                        "type": "string",
                        "example": "my-schema"
                    },
                    "skip-nonempty": {
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "OracleConfiguration": {
                "type": "object",
                "properties": {
                    "engine": {
                        "type": "string",
                        "example": "oracle"
                    },
                    "name": {
                        "type": "string",
                        "example": "MyOracle"
                    },
                    "user": {
                        "type": "string",
                        "example": "admin"
                    },
                    "host": {
                        "type": "string",
                        "example": "https://my-oracle.com"
                    },
                    "port": {
                        "type": "integer",
                        "example": 1521
                    },
                    "client": {
                        "type": "string",
                        "example": "C:\\oracle\\instantclient_21_6"
                    },
                    "version": {
                        "type": "string",
                        "example": "Oracle Database 21c Express Edition Release 21.0.0.0.0 - Production"
                    }
                }
            },
            "PostgresConfiguration": {
                "type": "object",
                "properties": {
                    "engine": {
                        "type": "string",
                        "example": "postgres"
                    },
                    "name": {
                        "type": "string",
                        "example": "MyPostgres"
                    },
                    "user": {
                        "type": "string",
                        "example": "admin"
                    },
                    "host": {
                        "type": "string",
                        "example": "https://my-postgres.com"
                    },
                    "port": {
                        "type": "integer",
                        "example": 5432
                    },
                    "version": {
                        "type": "string",
                        "example": "PostgreSQL 17.4 (Debian 17.4-1.pgdg120+2) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit"
                    }
                }
            },
            "S3Configuration": {
                "type": "object",
                "properties": {
                    "engine": {
                        "type": "string",
                        "example": "minio"
                    },
                    "endpoint-url": {
                        "type": "string",
                        "example": "https:/minio_installation.com/access"
                    },
                    "bucket-name": {
                        "type": "string",
                        "example": "my-bucket"
                    },
                    "access-key": {
                        "type": "string",
                        "example": "ADFSGTR7765YHTRTD76Y"
                    },
                    "secure-access": {
                        "type": "boolean",
                        "example": true
                    },
                    "version": {
                        "type": "string",
                        "example": "4.3.1"
                    }
                }
            },
            "MigrationSessionActivated": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Session 'my-session' set to 'active'"
                    }
                }
            },
            "MigrationSessionCreated": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Session 'my-session' created and set to 'active'"
                    }
                }
            },
            "MigrationSessionDeleted": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Session 'my-session' deleted"
                    }
                }
            },
            "MigrationSessionSuccess": {
                "type": "object",
                "properties": {
                    "client-id": {
                        "type": "string",
                        "example": "9745693c-3cd45-7830-c124-f15584393f8b"
                    },
                    "state": {
                        "type": "string",
                        "example": "inactive"
                    },
                    "spots": {
                        "$ref": "#/components/schemas/MigrationSpots"
                    },
                    "steps": {
                        "$ref": "#/components/schemas/MigrationSteps"
                    },
                    "metrics": {
                        "$ref": "#/components/schemas/MigrationMetrics"
                    },
                    "specs": {
                        "$ref": "#/components/schemas/MigrationSpecs"
                    },
                    "oracle": {
                        "$ref": "#/components/schemas/OracleConfiguration"
                    },
                    "postgres": {
                        "$ref": "#/components/schemas/PostgresConfiguration"
                    },
                    "aws": {
                        "$ref": "#/components/schemas/S3Configuration"
                    }
                }
            },
            "MigrationSessionsSuccess": {
                "type": "object",
                "properties": {
                    "client": {
                        "type": "string",
                        "example": "9745693c-3cd45-7830-c124-f15584393f8b"
                    },
                    "sessions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "example": "my-session"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "active"
                                },
                                "client": {
                                    "type": "string",
                                    "example": "8661743c-3bbd-43f0-b998-f15581753f8b"
                                }
                            }
                        }
                    }
                }
            },
            "MigrationAborted": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Migration in session 'my-session' marked for abortion"
                    }
                }
            },
            "MetricsUpdated": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Migration metrics updated"
                    },
                    "session_id": {
                        "type": "string",
                        "example": "my_session"
                    }
                }
            },
            "RdbmsUpdated": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Rdbms 'oracle' configuration updated for session 'my-session'"
                    }
                }
            },
            "S3Updated": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "S3 'minio' configuration updated for session 'my-session'"
                    }
                }
            },
            "VerificationSuccess": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Migration can be launched"
                    },
                    "session-id": {
                        "type": "string",
                        "example": "my-session"
                    },
                    "metrics": {
                        "$ref": "#/components/schemas/MigrationMetrics"
                    },
                    "from-rdbms": {
                        "$ref": "#/components/schemas/OracleConfiguration"
                    },
                    "to-rdbms": {
                        "$ref": "#/components/schemas/PostgresConfiguration"
                    },
                    "to-s3": {
                        "$ref": "#/components/schemas/S3Configuration"
                    }
                }
            },
            "VerificationFailure": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "Migration cannot be launched"
                    },
                    "session-id": {
                        "type": "string",
                        "example": "my-session"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string",
                                    "example": "Value 'oracle' cannot be assigned for attributes 'from-rdbms' and 'to-rdbms' at the same time"
                                }
                            }
                        }
                    }
                }
            },
            "MigrationSuccess": {
                "type": "object",
                "properties": {
                    "started": {
                        "type": "string",
                        "example": "2024-05-06T23:51:42.000Z"
                    },
                    "finished": {
                        "type": "string",
                        "example": "2024-05-06T23:51:46.000Z"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "migrate-metadata",
                            "migrate-plaindata"
                        ]
                    },
                    "collophon": {
                        "$ref": "#/components/schemas/Collophon"
                    },
                    "source-rdbms": {
                        "$ref": "#/components/schemas/OracleConfiguration"
                    },
                    "target-rdbms": {
                        "$ref": "#/components/schemas/PostgresConfiguration"
                    },
                    "target-s3": {
                        "$ref": "#/components/schemas/S3Configuration"
                    },
                    "migrated-tables": {
                        "type": "object",
                        "properties": {
                            "my-table": {
                                "type": "object",
                                "properties": {
                                    "plain-count": {
                                        "type": "integer",
                                        "example": 1250000
                                    },
                                    "plain-status": {
                                        "type": "string",
                                        "example": "full"
                                    },
                                    "lob-count": {
                                        "type": "integer",
                                        "example": 2500000
                                    },
                                    "lob-status": {
                                        "type": "string",
                                        "example": "full"
                                    },
                                    "my-column-1": {
                                        "type": "object",
                                        "properties": {
                                            "source-type": {
                                                "type": "string",
                                                "example": "NUMBER(7,0)"
                                            },
                                            "target-type": {
                                                "type": "string",
                                                "example": "INTEGER"
                                            },
                                            "features": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "example": [
                                                    "identity",
                                                    "primary-key"
                                                ]
                                            }
                                        }
                                    },
                                    "my-column-2": {
                                        "type": "object",
                                        "properties": {
                                            "source-type": {
                                                "type": "string",
                                                "example": "NUMBER(9,2)"
                                            },
                                            "target-type": {
                                                "type": "string",
                                                "example": "FLOAT"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "total-plains": {
                        "type": "integer",
                        "example": 1570970
                    },
                    "total-lobs": {
                        "type": "integer",
                        "example": 5890575
                    },
                    "total-tables": {
                        "type": "integer",
                        "example": 15
                    }
                }
            },
            "ChunkSizeError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "chunk-size"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value '50'"
                                }
                            }
                        }
                    }
                }
            },
            "MigrationBadgeError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "migration-badge"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value 'my-badge'"
                                }
                            }
                        }
                    }
                }
            },
            "SessionIdError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "session-id"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value 'my-session'"
                                }
                            }
                        }
                    }
                }
            },
            "SchemaError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "from-schema"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value 'my-schema'"
                                }
                            }
                        }
                    }
                }
            },
            "TablesError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "tables"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value 'my-table'"
                                }
                            }
                        }
                    }
                }
            },
            "RdbmsError": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "db-name"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value 'my-database''"
                                }
                            }
                        }
                    }
                }
            },
            "S3Error": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "attribute": {
                                    "type": "string",
                                    "example": "s3-engine"
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Invalid value 'my-engine'"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}