RELEVANT DOCKER OPERATIONS
==========================

# list existing images:
  docker images

# remove an image:
  docker rmi -f <image-id>

# remove all idle containers:
  docker container prune -f

# create an image (optional: --no-cache):
  docker build --build-arg PYDB_REGISTRY_DOCKER=%PYDB_REGISTRY_DOCKER% --build-arg PYDB_REGISTRY_HOST=%PYDB_REGISTRY_HOST% -t pydbrief:latest .

# run image locally (optional: --name pydbrief, -d instead of -it for detached mode):
  docker run --mount type=bind,source=%PYDB_REGISTRY_HOST%,target=%PYDB_REGISTRY_DOCKER% -it -p 5000:5000 pydbrief:latest

# list running containers:
docker ps -a

# show mounted volumes
docker inspect -f "{{ .Mounts }}" <container_id>

# stop the locally running container:
docker stop <container-id>

# save/install image in a tar file:
  docker save -o ./dist/<tar-file> pydbrief:latest
  docker load -i <tar-file>

# upload the image to a registry:
  docker tag pydbrief:latest <registry-url>/<new-tag>
  docker push <registry-url>/<image-tag>

# download image from a registry and run locally (optional: --name pydbrief):
docker run -it -d --rm -p <port>:<map-to-port>  <registry-url>/pydbrief:latest

# access the container's console (assuming it was run with --name pydbrief):
  docker exec -it pydbrief /bin/sh
# or
  docker exec -it pydbrief /bin/bash

# navigate to the app folder:
$ cd /opt/pydbrief/

# locate Python's packages
$ find / -name site-packages

# list Python's packages (usually in /usr/local/lib/python<x.xx>/site-packages)
$ ls -l <path-for-site-packages>